# this line routes the builds to Ubuntu 16.04
dist: xenial

# implicitly creates a venv for python in the VM (so pip syntax is "global")
language: python
python:
  - 3.7

# by default Travis starts every job from scratch. This speeds up things
cache: pip

# Perform pipeline only for events to master branch
branches:
  only:
  - master
  # this is needed for tag push actions (https://github.com/travis-ci/travis-ci/issues/8518#issuecomment-333489268)
  - /^v.*$/

#  https://docs.travis-ci.com/user/multi-os/
os:
  - linux
  # - osx
  #- windows

install: pip install -r requirements.txt


addons:
  apt:
    packages:
      - latexmk
      - texlive-fonts-recommended
      - texlive-latex-recommended
      - texlive-latex-extra
  # homebrew:
  #   packages: ...

# here we define the stages. stage ordering will come later
jobs:
  include:
    # Perform all needed tests to ensure repo quality. All scripts
    # in a stage are done in parallel. Stages are done sequentially.
    - stage: test
      name: "Check Code Style"
      script: python -m flake8
    - script: python -m unittest utest/tautology.py
      name: "Tautological Test"
    - script: python ci_scripts/utest_with_coverage.py -p 80.0 # -p is the codecov percent required to pass
      name: "Unit Testing and Code Coverage"
    # - script: python ci_scripts/memory_benchmark.py -m 512.0 -i 0.05 # -p max 512MB allowed, measuring every 50ms
    #   name: "Memory Benchmarking"
    # - script: python ci_scripts/runtime_benchmark.py -m 5.0 # -p max 5s per loop allowed (see script)
    #   name: "Runtime Benchmarking"

    # If all tests pass, go on to the build stage
    - stage: build
      script: python setup.py clean --all && python setup.py sdist bdist_wheel
      name: "Build Package"
    - script: make -C docs clean && make -C docs html && make -C docs latexpdf
      name: "Build Autodocs"

    # # If building was successful, deploy to various platforms
    # - stage: deploy
    #   script: echo ""
    #   name: "Deploy to GitHub Releases and PyPI"
    #   deploy:
    #     - provider: releases
    #       skip_cleanup: true
    #       api_key:
    #         secure:  <PASSWORD>
    #       file_glob: true
    #       file: dist/*
    #       on:
    #         tags: true
    #         branch: master
    #         repo: andres-fr/human-renderer
    #     - provider: pypi
    #       skip_cleanup: true
    #       user: "fr_andres"
    #       password:
    #         secure: <PASSWORD>
    #       on:
    #         tags: true
    #         branch: master
    #         repo: andres-fr/human-renderer


# Here you can specify the order for stages, or skip some
stages:
  - test
  - build
  # - deploy
